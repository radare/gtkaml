--- valacompiler.vala	2011-03-13 23:31:58.000000000 +0200
+++ GtkamlCompiler.vala	2011-03-13 23:31:11.000000000 +0200
@@ -19,11 +19,15 @@
  *
  * Author:
  * 	JÃ¼rg Billeter <j@bitron.ch>
+ * Adapted for Gtkaml:
+ *	Vlad Grecescu <b100dian@gmail.com>
+ *	pancake <pancake@nopcode.org>
  */
 
 using GLib;
+using Vala;
 
-class Vala.Compiler {
+class Gtkaml.Compiler {
 	static string basedir;
 	static string directory;
 	static bool version;
@@ -41,6 +45,9 @@
 	[CCode (array_length = false, array_null_terminated = true)]
 	static string[] fast_vapis;
 	static string target_glib;
+	[CCode (array_length = false, array_null_terminated = true)]
+	static string[] implicits_directories;
+	static bool write_vala;
 
 	static bool ccode_only;
 	static string header_filename;
@@ -124,6 +131,8 @@
 		{ "Xcc", 'X', 0, OptionArg.STRING_ARRAY, ref cc_options, "Pass OPTION to the C compiler", "OPTION..." },
 		{ "dump-tree", 0, 0, OptionArg.FILENAME, ref dump_tree, "Write code tree to FILE", "FILE" },
 		{ "save-temps", 0, 0, OptionArg.NONE, ref save_temps, "Keep temporary files", null },
+		{ "implicitsdir", 0, 0, OptionArg.FILENAME_ARRAY, ref implicits_directories, "Look for implicit add and creation methods and their parameters in DIRECTORY", "DIRECTORY..." },
+		{ "write-vala", 'V', 0, OptionArg.NONE, ref write_vala, "Parses gtkaml and gtkon files and stops after writing the vala source", null },
 		{ "profile", 0, 0, OptionArg.STRING, ref profile, "Use the given profile instead of the default", "PROFILE" },
 		{ "quiet", 'q', 0, OptionArg.NONE, ref quiet_mode, "Do not print messages to the console", null },
 		{ "verbose", 'v', 0, OptionArg.NONE, ref verbose_mode, "Print additional messages to the console", null },
@@ -135,6 +144,8 @@
 	};
 	
 	private int quit () {
+		context.remove_generated_files ();
+
 		if (context.report.get_errors () == 0 && context.report.get_warnings () == 0) {
 			return 0;
 		}
@@ -153,7 +164,7 @@
 
 	private int run () {
 		context = new CodeContext ();
-		CodeContext.push (context);
+		Vala.CodeContext.push (context);
 
 		// default to build executable
 		if (!ccode_only && !compile_only && output == null) {
@@ -188,12 +199,12 @@
 		context.includedir = includedir;
 		context.output = output;
 		if (basedir == null) {
-			context.basedir = CodeContext.realpath (".");
+			context.basedir = Vala.CodeContext.realpath (".");
 		} else {
-			context.basedir = CodeContext.realpath (basedir);
+			context.basedir = Vala.CodeContext.realpath (basedir);
 		}
 		if (directory != null) {
-			context.directory = CodeContext.realpath (directory);
+			context.directory = Vala.CodeContext.realpath (directory);
 		} else {
 			context.directory = context.basedir;
 		}
@@ -222,6 +233,9 @@
 		context.entry_point_name = entry_point;
 
 		context.run_output = run_output;
+		if (context.run_output) {
+			context.add_external_package ("gtk+-2.0");
+		}
 
 		if (defines != null) {
 			foreach (string define in defines) {
@@ -279,7 +293,7 @@
 
 		if (fast_vapis != null) {
 			foreach (string vapi in fast_vapis) {
-				var rpath = CodeContext.realpath (vapi);
+				var rpath = Vala.CodeContext.realpath (vapi);
 				var source_file = new SourceFile (context, SourceFileType.FAST, rpath);
 				context.add_source_file (source_file);
 			}
@@ -307,10 +321,10 @@
 		bool has_c_files = false;
 
 		foreach (string source in sources) {
-			if (context.add_source_filename (source, run_output)) {
-				if (source.has_suffix (".c")) {
+			bool is_valid = run_output || source.has_suffix(".gtkaml") || source.has_suffix(".gtkon");
+			if (context.add_source_filename (source, is_valid)) {
+				if (source.has_suffix (".c"))
 					has_c_files = true;
-				}
 			}
 		}
 		sources = null;
@@ -319,8 +333,13 @@
 			return quit ();
 		}
 		
-		var parser = new Parser ();
-		parser.parse (context);
+		var parser = new Gtkaml.Parser ();
+		parser.parse (context, implicits_directories);
+
+		if (write_vala) {
+			context.save_temps = true;
+			return quit ();
+		}
 
 		var genie_parser = new Genie.Parser ();
 		genie_parser.parse (context);
@@ -462,9 +481,9 @@
 		if (args[i] != null && args[i].has_prefix ("-")) {
 			try {
 				string[] compile_args;
-				Shell.parse_argv ("valac " + args[1], out compile_args);
+				Shell.parse_argv ("gtkamlc " + args[1], out compile_args);
 
-				var opt_context = new OptionContext ("- Vala");
+				var opt_context = new OptionContext ("- GtkAML");
 				opt_context.set_help_enabled (true);
 				opt_context.add_main_entries (options, null);
 				unowned string[] temp_args = compile_args;
@@ -541,12 +560,12 @@
 		// initialize locale
 		Intl.setlocale (LocaleCategory.ALL, "");
 
-		if (Path.get_basename (args[0]) == "vala" || Path.get_basename (args[0]) == "vala" + Config.PACKAGE_SUFFIX) {
+		if (Path.get_basename (args[0]) == "gtkaml") {
 			return run_source (args);
 		}
 
 		try {
-			var opt_context = new OptionContext ("- Vala Compiler");
+			var opt_context = new OptionContext ("- Vala Gtkaml/GtkON Compiler");
 			opt_context.set_help_enabled (true);
 			opt_context.add_main_entries (options, null);
 			opt_context.parse (ref args);
@@ -557,7 +576,7 @@
 		}
 		
 		if (version) {
-			stdout.printf ("Vala %s\n", Config.BUILD_VERSION);
+			stdout.printf ("Gtkaml %s for Vala 0.12\n", Config.PACKAGE_VERSION);
 			return 0;
 		}
 		
