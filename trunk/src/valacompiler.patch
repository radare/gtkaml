--- valacompiler.vala	2010-09-26 22:16:05.000000000 +0300
+++ GtkamlCompiler.vala	2010-09-26 23:31:46.000000000 +0300
@@ -19,11 +19,14 @@
  *
  * Author:
  * 	JÃ¼rg Billeter <j@bitron.ch>
+ * Adapted for Gtkaml:
+ *	Vlad Grecescu <b100dian@gmail.com>
  */
 
 using GLib;
+using Vala;
 
-class Vala.Compiler {
+class Gtkaml.Compiler {
 	static string basedir;
 	static string directory;
 	static bool version;
@@ -39,6 +42,8 @@
 	[CCode (array_length = false, array_null_terminated = true)]
 	static string[] packages;
 	static string target_glib;
+	[CCode (array_length = false, array_null_terminated = true)]
+	static string[] implicits_directories; 
 
 	static bool ccode_only;
 	static string header_filename;
@@ -117,6 +122,7 @@
 		{ "Xcc", 'X', 0, OptionArg.STRING_ARRAY, ref cc_options, "Pass OPTION to the C compiler", "OPTION..." },
 		{ "dump-tree", 0, 0, OptionArg.FILENAME, ref dump_tree, "Write code tree to FILE", "FILE" },
 		{ "save-temps", 0, 0, OptionArg.NONE, ref save_temps, "Keep temporary files", null },
+		{ "implicitsdir", 0, 0, OptionArg.FILENAME_ARRAY, ref implicits_directories, "Look for implicit add and creation methods and their parameters in DIRECTORY", "DIRECTORY..." },
 		{ "profile", 0, 0, OptionArg.STRING, ref profile, "Use the given profile instead of the default", "PROFILE" },
 		{ "quiet", 'q', 0, OptionArg.NONE, ref quiet_mode, "Do not print messages to the console", null },
 		{ "verbose", 'v', 0, OptionArg.NONE, ref verbose_mode, "Print additional messages to the console", null },
@@ -196,7 +202,7 @@
 	
 	private int run () {
 		context = new CodeContext ();
-		CodeContext.push (context);
+		Vala.CodeContext.push (context);
 
 		// default to build executable
 		if (!ccode_only && !compile_only && output == null) {
@@ -351,7 +357,7 @@
 		foreach (string source in sources) {
 			if (FileUtils.test (source, FileTest.EXISTS)) {
 				var rpath = realpath (source);
-				if (run_output || source.has_suffix (".vala") || source.has_suffix (".gs")) {
+				if (run_output || source.has_suffix (".vala") || source.has_suffix (".gs") || source.has_suffix (".gtkaml")) {
 					var source_file = new SourceFile (context, rpath);
 					source_file.relative_filename = source;
 
@@ -394,8 +400,8 @@
 			return quit ();
 		}
 		
-		var parser = new Parser ();
-		parser.parse (context);
+		var parser = new Gtkaml.Parser ();
+		parser.parse (context, implicits_directories);
 
 		var genie_parser = new Genie.Parser ();
 		genie_parser.parse (context);
@@ -694,12 +700,8 @@
 	}
 
 	static int main (string[] args) {
-		if (Path.get_basename (args[0]) == "vala" || Path.get_basename (args[0]) == "vala" + Config.PACKAGE_SUFFIX) {
-			return run_source (args);
-		}
-
 		try {
-			var opt_context = new OptionContext ("- Vala Compiler");
+			var opt_context = new OptionContext ("- Vala Gtkaml Compiler");
 			opt_context.set_help_enabled (true);
 			opt_context.add_main_entries (options, null);
 			opt_context.parse (ref args);
@@ -710,7 +712,7 @@
 		}
 		
 		if (version) {
-			stdout.printf ("Vala %s\n", Config.BUILD_VERSION);
+			stdout.printf ("Gtkaml %s based on Vala 0.10\n", Config.VERSION);
 			return 0;
 		}
 		
