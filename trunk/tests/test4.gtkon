/* GtkON syntax example -- pancake<nopcode.org> */

VBox $MyVBox !homogeneous spacing=0 using=Gtk {

	gtkaml:preconstruct {
		-{ message ("root preconstruct code"); }-
	}

	/* Use '$' as short for 'gtkaml:public' */
	HBox { Label label=Username; Entry $user property="get; private set"; }
	HBox { Label label=Password; Entry $pass; }
/*
	HBox { Label label=Username; Entry gtkaml:public=user; }
	HBox { Label label=Password; Entry gtkaml:public=pass; }
*/
  	Button label='This Ã­s "pure" fun' clicked={clicked()};
	Button label="This is \"pure\" fun" clicked={clicked()};
	Button label="{\"%d\".printf(WindowType.TOPLEVEL)}" clicked={clicked()};
	Button label={"%d".printf(WindowType.TOPLEVEL)} clicked={clicked()};
	Button label=SHOW clicked='(x)=>{pipi.show();}';

	/* attributes without value defaults to true */
	VBox $.pipi can_focus !homogeneous spacing=0 {
		HBox homogeneous=true spacing=0 {
			Label label=One gtkaml:public=label { }
			Label label=One gtkaml:public=label2{ }
			Label label=One gtkaml:public=label3 {}
			Label label=One gtkaml:public=label4{}
			Label label=One gtkaml:public=label5;
			Label label=One gtkaml:public=label6 ;

			Button label=Two clicked={clicked()};
			Button label=HIDE clicked='(x)=>{message("jiji");pipi.hide();}';
			Label label=Tri gtkaml:public=label8;
		}
		Entry text=pasta activate={clicked()};
		Entry text=jiji activate={clicked()};
	}

	-{
		static void clicked () {
			message("clicked!\n");
		}   

		static void main (string[] args) {
			Gtk.init (ref args);
			var w = new Gtk.Window (WindowType.TOPLEVEL);
			var vb = new MyVBox ();
			w.add (vb);
			w.destroy.connect (Gtk.main_quit);
			w.show_all (); 
			Gtk.main (); 
			print ("Username: "+ vb.user.text+"\n");
		}
	}-
}
