--- ../../vala/compiler/valacompiler.vala	2009-10-27 09:43:28.000000000 +0200
+++ GtkamlCompiler.vala	2009-10-27 10:07:11.000000000 +0200
@@ -1,5 +1,5 @@
 /* valacompiler.vala
- *
+ * 
  * Copyright (C) 2006-2009  Jürg Billeter
  * Copyright (C) 1996-2002, 2004, 2005, 2006 Free Software Foundation, Inc.
  *
@@ -19,11 +19,14 @@
  *
  * Author:
  * 	Jürg Billeter <j@bitron.ch>
+ * Adapted for Gtkaml:
+ *	Vlad Grecescu <b100dian@gmail.com>
  */
 
 using GLib;
+using Vala;
 
-class Vala.Compiler {
+class Gtkaml.Compiler {
 	static string basedir;
 	static string directory;
 	static bool version;
@@ -43,6 +46,9 @@
 	[NoArrayLength]
 	static string[] packages;
 	static string target_glib;
+	[CCode (array_length = false, array_null_terminated = true)]
+	[NoArrayLength]
+	static string[] implicits_directories; 
 
 	static bool ccode_only;
 	static string header_filename;
@@ -111,6 +117,7 @@
 		{ "Xcc", 'X', 0, OptionArg.STRING_ARRAY, ref cc_options, "Pass OPTION to the C compiler", "OPTION..." },
 		{ "dump-tree", 0, 0, OptionArg.FILENAME, ref dump_tree, "Write code tree to FILE", "FILE" },
 		{ "save-temps", 0, 0, OptionArg.NONE, ref save_temps, "Keep temporary files", null },
+		{ "implicitsdir", 0, 0, OptionArg.FILENAME_ARRAY, ref implicits_directories, "Look for implicit add and creation methods and their parameters in DIRECTORY", "DIRECTORY..." },
 		{ "profile", 0, 0, OptionArg.STRING, ref profile, "Use the given profile instead of the default", "PROFILE" },
 		{ "quiet", 'q', 0, OptionArg.NONE, ref quiet_mode, "Do not print messages to the console", null },
 		{ "verbose", 'v', 0, OptionArg.NONE, ref verbose_mode, "Print additional messages to the console", null },
@@ -313,6 +320,8 @@
 					context.add_source_file (source_file);
 				} else if (source.has_suffix (".vapi") || source.has_suffix (".gir")) {
 					context.add_source_file (new SourceFile (context, rpath, true));
+                                } else if (source.has_suffix (".gtkaml")) {
+                                        context.add_source_file (new SourceFile (context, rpath));
 				} else if (source.has_suffix (".c")) {
 					context.add_c_source_file (rpath);
 				} else {
@@ -328,8 +337,8 @@
 			return quit ();
 		}
 		
-		var parser = new Parser ();
-		parser.parse (context);
+		var parser = new Gtkaml.Parser ();
+		parser.parse (context, implicits_directories);
 
 		var genie_parser = new Genie.Parser ();
 		genie_parser.parse (context);
@@ -548,7 +557,7 @@
 
 	static int main (string[] args) {
 		try {
-			var opt_context = new OptionContext ("- Vala Compiler");
+			var opt_context = new OptionContext ("- Vala Gtkaml Compiler");
 			opt_context.set_help_enabled (true);
 			opt_context.add_main_entries (options, null);
 			opt_context.parse (ref args);
@@ -559,7 +568,7 @@
 		}
 		
 		if (version) {
-			stdout.printf ("Vala %s\n", Config.PACKAGE_VERSION);
+			stdout.printf ("Gtkaml %s (based on Vala 0.7.6)\n", Config.PACKAGE_VERSION);
 			return 0;
 		}
 		
