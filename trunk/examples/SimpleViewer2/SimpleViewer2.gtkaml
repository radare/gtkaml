<!-- this is a port of http://www.michaelwerle.name/Programming/CSharp/SimpleViewer2.glade -->
<Window xmlns='Gtk' xmlns:GLib='GLib' xmlns:class="http://gtkaml.org/0.2"
	class:name="SimpleViewer2" title="SimpleViewer2"	type="{WindowType.TOPLEVEL}"	delete-event="{OnWindow1DeleteEvent}">
	<VBox homogeneous="false" spacing="0">
		<!-- <packing>
		        <property name="expand">False</property>
		     </packing>
		     =>
		     expand="false"
		-->
		<MenuBar expand="false" padding="0" fill="false">
			<!-- use_underline => with-mnemonic -->
			<MenuItem label="_File" with-mnemonic="true">
				<submenu>
					<Menu>
						<!-- use_stock => from-stock -->
						<ImageMenuItem accel-group="null" stock-id="gtk-new" from-stock="true" />
						<ImageMenuItem accel-group="null" stock-id="gtk-open" from-stock="true" activate="{OnFileOpenEvent}"/>
						<ImageMenuItem accel-group="null" stock-id="gtk-save" from-stock="true" />
						<ImageMenuItem accel-group="null" stock-id="gtk-save-as" from-stock="true" />
						<SeparatorMenuItem />
						<ImageMenuItem accel-group="null" stock-id="gtk-quit" from-stock="true" activate="{OnQuitEvent}"/>
					</Menu>
				</submenu>
			</MenuItem>
			<MenuItem label="_Edit" with-mnemonic="true">
				<submenu>
					<Menu>
						<ImageMenuItem accel-group="null" stock-id="gtk-cut" from-stock="true" />
						<ImageMenuItem accel-group="null" stock-id="gtk-copy" from-stock="true" />
						<ImageMenuItem accel-group="null" stock-id="gtk-paste" from-stock="true" />
						<ImageMenuItem accel-group="null" stock-id="gtk-delete" from-stock="true" />
					</Menu>
				</submenu>
			</MenuItem>
			<MenuItem label="_View" with-mnemonic="true">
				<submenu>
					<Menu>
						<CheckMenuItem label="_Word Wrap" with-mnemonic="true" class:private="menuWordWrap" activate="{OnWordWrapActivatedEvent}" />
					</Menu>
				</submenu>
			</MenuItem>
			<MenuItem label="_Help" with-mnemonic="true">
				<submenu>
					<Menu>
						<ImageMenuItem accel-group="null" stock-id="gtk-about" from-stock="true" activate="{OnMenuHelpAboutActivatedEvent}"/>
					</Menu>
				</submenu>
			</MenuItem>
		</MenuBar>
		<ScrolledWindow can-focus="true" hscrollbar-policy="{PolicyType.AUTOMATIC}" vscrollbar-policy="{PolicyType.AUTOMATIC}"  hadjustment="null" vadjustment="null">
			<TextView can-focus="true" editable="false" class:private="textview1"/>
		</ScrolledWindow>
	</VBox>	
	<AboutDialog class:standalone="true" class:private="aboutdialog1" delete-event="{aboutdialog1.hide_on_delete}"
		border-width="5" title="About SimpleViewer2" resizable="false" modal="true"
		window-position="{WindowPosition.CENTER_ON_PARENT}" has-separator="false"
		program-name="SimpleViewer2" version="1.0" copyright="Copyright (c) 2007 MIchael Werle"
		comments="Simple .Net demonstration program, displays a text file in a scrolling text box and allows the user to toggle word-wrap on and off"
		website="http://www.michaelwerle.com/SimpleViewer2/" authors='{new string[] {"Michael Werle (micha@michaelwerle.com), ported to gtkaml by Vlad Grecescu (b100dian@gmail.com)",null}}'>
		<VBox class:standalone="true" class:existing="(aboutdialog1.vbox as VBox)">
			<!-- add more stuff here? -->
		</VBox>	
		<HButtonBox class:standalone="true" class:existing="(aboutdialog1.action_area as HButtonBox)">
			<!-- add more buttons here? -->
		</HButtonBox>
	</AboutDialog>			

<![CDATA[

	private void OnWindow1DeleteEvent ()
	{
		doCloseApplication ();
	}

	private void doCloseApplication ()
	{
    // TODO: Any checks to determine whether or not the application
    // should stay active..
    //if( test-for-shutdown fails )
    //  return false;

    // By default, quit application and signal that we should
    // close the main window.
		Gtk.main_quit ();
	}

  private void OnFileOpenEvent ()
  {
    FileChooserDialog fc = new FileChooserDialog("Select file to open",
        this,
        FileChooserAction.OPEN,
        "Cancel",ResponseType.CANCEL,
        "Open",ResponseType.ACCEPT);

    int resp = fc.run ();
    fc.hide ();
    if (resp == ResponseType.ACCEPT)
    {
      loadFile(fc.get_filename ());
    }
    fc.destroy ();
  }

	public bool loadFile( string filename )
  {
    int err = 0;
    try
    {
    	string contents; int length;
      FileUtils.get_contents (filename, out contents, out length);
      textview1.buffer.set_text (contents, length);
    }
    catch(Error e)
    {
      showError ("Unexpected error while loading the file, please contact the author with the following information:\n\n" + e.message);
      err++;
    }
    return err == 0;
  }
	
  private void showError (string s)
  {
      MessageDialog md = new MessageDialog (this,
          DialogFlags.DESTROY_WITH_PARENT,
          MessageType.ERROR,
          ButtonsType.CLOSE,
          s);
      md.run ();
      md.destroy ();
  }

  private void OnQuitEvent ()
  {
    doCloseApplication();
  }


	private void OnWordWrapActivatedEvent ()
	{
		textview1.wrap_mode = menuWordWrap.active ? WrapMode.WORD_CHAR: WrapMode.NONE;
	}
	
	private void OnMenuHelpAboutActivatedEvent ()
	{
		aboutdialog1.transient_for = this;
		aboutdialog1.run ();
	}

	static int main (string[] args)
	{
		Gtk.init (ref args);
		var viewer = new SimpleViewer2 ();
		if (args.length > 1)
			viewer.loadFile (args[1]);
		viewer.show_all ();
		Gtk.main ();
	}
]]>
</Window>
