/* from http://www.openismus.com/documents/clutter_tutorial/0.8/docs/tutorial/html/sec-full-example.html */

Window using=Gtk using:gtkclutter=GtkClutter using:clutter=Clutter
	name=ClutterExamples.MainWindow destroy=Gtk.main_quit
{
	VBox {
		gtkclutter:Embed $.embed width_request=800 height_request=600;
		HBox {
			Button label=Close clicked=Gtk.main_quit;
		}
	}

	/* configuring the existing stage */
	clutter:Stage gtkaml:existing="embed.get_stage()" standalone {
		color { clutter:Color red=0xB0 green=0xB0 blue=0xB0 alpha=0xff; }
		clutter:Text x=10 y=10 opacity=0 color={label_color} font-name="Sans 24";
		clutter:Rectangle $.rect color={rectangle_color}
		height={ ELLIPSE_HEIGHT + 20 }
		width={ stage.width + 100 }
		x={ -(rect.width - stage.width)/2 }
		y={ ELLIPSE_Y + IMAGE_HEIGHT - rect.height/2 }
		/* no setters for rotation */
		construct="target.set_rotation (RotateAxis.X_AXIS, -90, 0, target.height/2, 0)";
	}

	-{
		const int ELLIPSE_Y = 390;
		const int ELLIPSE_HEIGHT = 450;
		const int IMAGE_HEIGHT = 100;

		private Color label_color = Color () { red=0x60, green=0x60, blue=0x90, alpha=0xff };
		private Color rectangle_color = Color () { red=0xff, green=0xff, blue=0xff, alpha=0xff };
		private Stage stage {
			get {
				return (Stage)embed.get_stage ();
			}
		}

		public static int main (string[] args) {
			GtkClutter.init (ref args);
			var window = new MainWindow ();
			window.show_all ();
			Gtk.main ();
			return 0;
		}
	}-
}
